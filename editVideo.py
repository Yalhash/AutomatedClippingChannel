from sortParseDown import getAllVids
import os
import subprocess

#This is for windows, if you are on *nix, change to '/'

def clearAssets():
    '''
    deletes all old videos from assets
    basically want to do rm *.mp4
    '''
    assets = 'assets'
    for file in os.listdir(assets):
        path = os.path.join(assets, file)
        try:
            if os.path.isfile(path) and (path[-4:] == '.mp4' or path[-4:] == '.txt' or path[-4:] == '.ass'):
                os.unlink(path)
        except Exception as e:
            print(e)
    

def joinVideos(vidList, finalName):
    '''
    vid1: string, name of first video
    vid2: string, name of second video
    finalName: string, name of final video
    (Note: names do not include directories or file extentions)
    (Note 2: before joining videos, videos must be remuxed so all of their codecs are the same)
    ffmpeg -y -f concat -i tempList.txt -c copy <finalVideo>
    '''
    with open('assets/tempList.txt', 'w') as listFile:
        for i in vidList: #assets/
            listFile.write("file '"+ i + ".mp4'\n") 

    os.system('ffmpeg -y -f concat -safe 0 -i assets/tempList.txt -c copy "finalVids/' +finalName +'.mp4"')
    return finalName

def remuxVids(vidList):
    '''
    vidList: list<str>, list of video names to remux
    returns: list<str>, list of final video names
    ffmpeg -y -i <vidName> -c:v h264 -c:a aac <finalName>
    (Note: final names are just original filenames with _fin appended)
    '''
    finalList = []
    for fileName in vidList:
        tempFinal = fileName + '_fin'
        os.system('ffmpeg -y -i "assets/' + fileName + '.mp4" -c:v h264 -c:a aac  "assets/' + tempFinal + '.mp4"')
        finalList.append(tempFinal)

    return finalList






def makeSubtitle(fileName):
    '''
    fileName: string, the name of a file to make the title card for
    returns: string, the name of the subtitle file
    spits out a .ass file to be attatched to the video later
    the returning fileName will be the same as the original, except whitespaces will be replaced with underscores
    (makes a ~2 second subtitle of the title of the clip)
    '''
    COLOURCODE = '000000'
    FONTSIZE = '36'
    FONT = 'Arial'
    title = fileName.split('_')[0]
    with open('assets/'+title.replace(' ', '_') + '.ass', 'w') as subFile:
        #script info/preamble
        subFile.write('[Script Info]\n')
        subFile.write(';Generated by Clip Grabber :)\n')
        subFile.write('ScriptType: v4.00+\n')
        subFile.write('PlayResX: 384\n')
        subFile.write('PlayResY: 288\n\n')
        subFile.write('[V4+ Styles]\n')
        subFile.write('Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n')
        subFile.write('Style: Default,'+FONT+','+ FONTSIZE+ ',&'+ COLOURCODE + ',&H' + COLOURCODE + ',&H' + COLOURCODE + ',&H' + COLOURCODE + ',0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0\n\n')
        subFile.write('[Events]\n\n')
        subFile.write('Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n')
        subFile.write('Dialogue: 0,0:00:1.00,0:00:04.00,Default,,0,0,0,,'+title + '\n')
    return title

def applySubtitle(fileName, subName):
    '''
    fileName: string, the name of a file apply the subtitles to
    returns: string, the name of the new .mp4 file with subtitles burned in
    (Note: this filename is the same as the given filename but with _sub at the end)
    ffmpeg/ffmpeg.exe -i <name> -vf "ass=<subName>" <outputName>
    '''
    
    newFile = fileName + '_sub'
    print(fileName)
    #'ffmpeg -i assets'+ PATHSEPERATOR + fileName +'.mp4" -vf "ass=assets' + PATHSEPERATOR + subName + '.ass" assets' + PATHSEPERATOR + escapeWhiteSpace(newFile)+'.mp4 -y'
    #'+ subName + '.ass
    os.system('ffmpeg -i "assets/'+ fileName + '.mp4" -vf "ass=assets/'+ subName + '.ass" "assets/'+newFile+'.mp4" -y')
    return newFile


if __name__ == "__main__":
    #vidList = ['BIG SCHLICE_mang0_26_3000_2-days-ago', 'Alex19 thinks Grand Finals is Fake News_mach1alex19_30_415_5-days-ago', "alex19s view on ludwig_mach1alex19_38_196_4-days-ago"]
    fileName = 'BIG SCHLICE_mang0_26_3000_2-days-ago'
    #subName = makeSubtitle(fileName)
    applySubtitle(fileName, 'BIG SCHLICE')
    
    
    # vidList = ['test1', 'test2', "test3"]
    #print(remuxVids(vidList))
    #print(joinVideos(vidList, 'yeet'))
    


