import os

#----------------------------------HELPER FUNCTIONS------------------------------

def join_videos(vid_list, final_name):
    '''
    vid_list: a list of video names to join together
    final_name: string, name of final video
    (Note: before joining videos, videos must be remuxed so all of their codecs are the same)
    (Note 2: names do not include directories or file extentions)
    ffmpeg -y -f concat -i tempList.txt -c copy <finalVideo>
    '''
    temp_list_path = os.path.join("assets", "tempList.txt")
    final_vid_path = os.path.join("finalVids", final_name + '.mp4')

    with open(temp_list_path, 'w', encoding="UTF-8") as list_file:
        for i in vid_list: 
            list_file.write("file '"+ i + ".mp4'\n")

    os.system(
        'ffmpeg -y -f concat -safe 0 -i ' \
        + temp_list_path + ' -c copy "' + final_vid_path + '"'
    )


def remux_vids(vid_list):
    '''
    vid_list: list<str>, list of video names to remux
    returns: list<str>, list of final video names
    ffmpeg -y -i <vidName> -c:v h264 -c:a aac <final_name>
    (Note: final names are just original filenames with _fin appended)
    '''
    final_list = []
    for file_name in vid_list:
        temp_final = file_name + '_fin'
        vid_file_path = os.path.join("assets", file_name + ".mp4")
        temp_final_path = os.path.join("assets", temp_final + ".mp4")
        os.system(
            'ffmpeg -y -i "' + vid_file_path +\
            '" -c:v h264 -c:a aac  "' + temp_final_path + '"'
        )
        final_list.append(temp_final)

    return final_list


def make_subtitle(title, file_name):
    '''
    file_name: string, the name of a file to make the title card for
    returns: string, the name of the subtitle file
    spits out a .ass file to be attatched to the video later
    the returning file_name will be the same as the original, 
    except whitespaces will be replaced with underscores
    (makes a ~2 second subtitle of the title of the clip)
    '''

    primary_colour = 'a54164'
    secondary_colour = '000000'

    back_colour = 'FFFFFF'
    font_size = '28'
    #FONTS NOT WORKING IDK WHY, JUST DEFAULTS TO ARIAL
    font = 'Courier'    #'Atle Haas Grotesk'

    subtitle_fpath = os.path.join("assets", file_name + ".ass")
    with open(subtitle_fpath, 'w', encoding="UTF-8") as sub_file:
        #script info/preamble
        sub_file.write('[Script Info]\n')
        sub_file.write(';Generated by Clip Grabber :)\n')
        sub_file.write('ScriptType: v4.00+\n')
        sub_file.write('PlayResX: 384\n')
        sub_file.write('PlayResY: 288\n\n')
        sub_file.write('[V4+ Styles]\n')
        sub_file.write('Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n')
        sub_file.write('Style: Default,'+font+','+ font_size + ',&H'+ primary_colour + ',&H' + secondary_colour + ',&H' + primary_colour + ',&H' + back_colour + ',0,0,0,0,100,100,0,0,0,1,0,2,10,10,10,0\n\n')
        sub_file.write('[Events]\n\n')
        sub_file.write('Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n')
        sub_file.write('Dialogue: 0,0:00:00.00,0:00:04.00,Default,,0,0,0,,'+title + '\n')

    return file_name

def apply_subtitle(file_name, sub_name):
    '''
    file_name: string, the name of a file apply the subtitles to
    returns: string, the name of the new .mp4 file with subtitles burned in
    (Note: this filename is the same as the given filename but with _sub at the end)
    ffmpeg/ffmpeg.exe -i <name> -vf "ass=<sub_name>" <outputName>
    '''

    new_file = file_name + '_sub'
    vid_file_path = os.path.join("assets", file_name + ".mp4")
    sub_file_path = os.path.join("assets", sub_name + ".ass")
    new_file_path = os.path.join("assets", new_file + ".mp4")
    print("sub_file_path", sub_file_path)
    os.system('ffmpeg  -y -i "' + vid_file_path + \
        '" -vf "ass=' + sub_file_path + '" "' + new_file_path + '"'
    )
    return new_file


#----------------------------------FINAL FUNCTIONS------------------------------

def concat_videos(vid_list, final_name):
    '''
    vid_list: list<str>, list of video names to add together
    final_name: str, name of the final Video
    '''
    fin_vid_list = remux_vids(vid_list)
    join_videos(fin_vid_list, final_name)



def sub_all_videos(vid_list):
    '''
    vid_list: list<MetaData>, list of all videos to make subtitles of
    returns: list<str>, list of all videos with subtitles attatched
    '''
    sub_list = []
    for video in vid_list:
        temp_sub = make_subtitle(video.title, video.file_name)
        sub_name = apply_subtitle(video.file_name, temp_sub)
        sub_list.append(sub_name)

    return sub_list

def make_video(video_list):
    '''
    video_list: a list of video metadata objects
    returns: the name of the final Video
    takes in the list of metaData and puts subtitles on all of them,
    and then concatinates them
    '''
    #final Name should be the video with the most views
    #since metaDataList is sorted by default we take first
    existing_vid_list = []
    for vid in video_list:
        vid_path = os.path.join("assets", vid.file_name + ".mp4")
        if os.path.exists(vid_path):
            existing_vid_list.append(vid)
        else:
            print ("NEVER downloaded clip:\"" + vid.title + "\"")

    assert len(existing_vid_list) != 0
    final_name = existing_vid_list[0].file_name

    # sub_list = sub_all_videos(existing_vid_list)
    sub_all_videos(existing_vid_list)
    # concat_videos(sub_list, final_name)
    return final_name

if __name__ == "__main__":
    pass
